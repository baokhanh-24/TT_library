// <auto-generated />
using System;
using Library.AppDBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Library.Models.admin", b =>
                {
                    b.Property<int>("admin_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("admin_ID"), 1L, 1);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("admin_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_At")
                        .HasColumnType("datetime2");

                    b.Property<bool>("delete_Flag")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("update_At")
                        .HasColumnType("datetime2");

                    b.HasKey("admin_ID");

                    b.ToTable("admins");
                });

            modelBuilder.Entity("Library.Models.authors", b =>
                {
                    b.Property<int>("authors_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("authors_ID"), 1L, 1);

                    b.Property<DateTime>("create_At")
                        .HasColumnType("datetime2");

                    b.Property<bool>("delete_Flag")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("update_At")
                        .HasColumnType("datetime2");

                    b.HasKey("authors_ID");

                    b.ToTable("authorss");
                });

            modelBuilder.Entity("Library.Models.books", b =>
                {
                    b.Property<int>("books_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("books_ID"), 1L, 1);

                    b.Property<int>("authors_ID")
                        .HasColumnType("int");

                    b.Property<int>("authors_ID1")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_At")
                        .HasColumnType("datetime2");

                    b.Property<bool>("delete_Flag")
                        .HasColumnType("bit");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("genres_ID")
                        .HasColumnType("int");

                    b.Property<int>("genres_ID1")
                        .HasColumnType("int");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("publishing_Year")
                        .HasColumnType("int");

                    b.Property<int>("quantity_In_Stock")
                        .HasColumnType("int");

                    b.Property<string>("subtitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("update_At")
                        .HasColumnType("datetime2");

                    b.HasKey("books_ID");

                    b.HasIndex("authors_ID1");

                    b.HasIndex("genres_ID1");

                    b.ToTable("bookss");
                });

            modelBuilder.Entity("Library.Models.borrowingItem", b =>
                {
                    b.Property<int>("borrowingItem_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("borrowingItem_ID"), 1L, 1);

                    b.Property<int>("Books_bribooks_ID")
                        .HasColumnType("int");

                    b.Property<int>("Borrowings_briborrowings_ID")
                        .HasColumnType("int");

                    b.Property<int>("books_ID")
                        .HasColumnType("int");

                    b.Property<int>("borrowings_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_At")
                        .HasColumnType("datetime2");

                    b.Property<bool>("delete_Flag")
                        .HasColumnType("bit");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("update_At")
                        .HasColumnType("datetime2");

                    b.HasKey("borrowingItem_ID");

                    b.HasIndex("Books_bribooks_ID");

                    b.HasIndex("Borrowings_briborrowings_ID");

                    b.ToTable("borrowingItems");
                });

            modelBuilder.Entity("Library.Models.borrowings", b =>
                {
                    b.Property<int>("borrowings_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("borrowings_ID"), 1L, 1);

                    b.Property<int>("Users_brusers_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("actual_End_At")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("create_At")
                        .HasColumnType("datetime2");

                    b.Property<bool>("delete_Flag")
                        .HasColumnType("bit");

                    b.Property<DateTime>("end_At")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("start_At")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("update_At")
                        .HasColumnType("datetime2");

                    b.Property<int>("users_ID")
                        .HasColumnType("int");

                    b.HasKey("borrowings_ID");

                    b.HasIndex("Users_brusers_ID");

                    b.ToTable("borrowingss");
                });

            modelBuilder.Entity("Library.Models.genres", b =>
                {
                    b.Property<int>("genres_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("genres_ID"), 1L, 1);

                    b.Property<DateTime>("create_At")
                        .HasColumnType("datetime2");

                    b.Property<bool>("delete_Flag")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("update_At")
                        .HasColumnType("datetime2");

                    b.HasKey("genres_ID");

                    b.ToTable("genress");
                });

            modelBuilder.Entity("Library.Models.ratings", b =>
                {
                    b.Property<int>("ratings_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ratings_ID"), 1L, 1);

                    b.Property<int>("books_ID")
                        .HasColumnType("int");

                    b.Property<int>("books_rbooks_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_At")
                        .HasColumnType("datetime2");

                    b.Property<bool>("delete_Flag")
                        .HasColumnType("bit");

                    b.Property<int>("star")
                        .HasColumnType("int");

                    b.Property<DateTime>("update_At")
                        .HasColumnType("datetime2");

                    b.Property<int>("users_ID")
                        .HasColumnType("int");

                    b.Property<int>("users_rusers_ID")
                        .HasColumnType("int");

                    b.HasKey("ratings_ID");

                    b.HasIndex("books_rbooks_ID");

                    b.HasIndex("users_rusers_ID");

                    b.ToTable("ratingss");
                });

            modelBuilder.Entity("Library.Models.users", b =>
                {
                    b.Property<int>("users_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("users_ID"), 1L, 1);

                    b.Property<DateTime>("create_At")
                        .HasColumnType("datetime2");

                    b.Property<bool>("delete_Flag")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("update_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("user_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("users_ID");

                    b.ToTable("userss");
                });

            modelBuilder.Entity("Library.Models.books", b =>
                {
                    b.HasOne("Library.Models.authors", "Authors")
                        .WithMany("Books_a")
                        .HasForeignKey("authors_ID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Models.genres", "Genres")
                        .WithMany("Books_g")
                        .HasForeignKey("genres_ID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Authors");

                    b.Navigation("Genres");
                });

            modelBuilder.Entity("Library.Models.borrowingItem", b =>
                {
                    b.HasOne("Library.Models.books", "Books_bri")
                        .WithMany("BorrowingItems_b")
                        .HasForeignKey("Books_bribooks_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Models.borrowings", "Borrowings_bri")
                        .WithMany("BorrowingItem_br")
                        .HasForeignKey("Borrowings_briborrowings_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Books_bri");

                    b.Navigation("Borrowings_bri");
                });

            modelBuilder.Entity("Library.Models.borrowings", b =>
                {
                    b.HasOne("Library.Models.users", "Users_br")
                        .WithMany("Borrowings_br")
                        .HasForeignKey("Users_brusers_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users_br");
                });

            modelBuilder.Entity("Library.Models.ratings", b =>
                {
                    b.HasOne("Library.Models.books", "books_r")
                        .WithMany("Ratings_b")
                        .HasForeignKey("books_rbooks_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Models.users", "users_r")
                        .WithMany("ratings_u")
                        .HasForeignKey("users_rusers_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("books_r");

                    b.Navigation("users_r");
                });

            modelBuilder.Entity("Library.Models.authors", b =>
                {
                    b.Navigation("Books_a");
                });

            modelBuilder.Entity("Library.Models.books", b =>
                {
                    b.Navigation("BorrowingItems_b");

                    b.Navigation("Ratings_b");
                });

            modelBuilder.Entity("Library.Models.borrowings", b =>
                {
                    b.Navigation("BorrowingItem_br");
                });

            modelBuilder.Entity("Library.Models.genres", b =>
                {
                    b.Navigation("Books_g");
                });

            modelBuilder.Entity("Library.Models.users", b =>
                {
                    b.Navigation("Borrowings_br");

                    b.Navigation("ratings_u");
                });
#pragma warning restore 612, 618
        }
    }
}
